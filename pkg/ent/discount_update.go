// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/discount"
	"github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/order"
	"github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/predicate"
	"github.com/google/uuid"
)

// DiscountUpdate is the builder for updating Discount entities.
type DiscountUpdate struct {
	config
	hooks    []Hook
	mutation *DiscountMutation
}

// Where appends a list predicates to the DiscountUpdate builder.
func (du *DiscountUpdate) Where(ps ...predicate.Discount) *DiscountUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetPeriodStart sets the "period_start" field.
func (du *DiscountUpdate) SetPeriodStart(t time.Time) *DiscountUpdate {
	du.mutation.SetPeriodStart(t)
	return du
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (du *DiscountUpdate) SetNillablePeriodStart(t *time.Time) *DiscountUpdate {
	if t != nil {
		du.SetPeriodStart(*t)
	}
	return du
}

// ClearPeriodStart clears the value of the "period_start" field.
func (du *DiscountUpdate) ClearPeriodStart() *DiscountUpdate {
	du.mutation.ClearPeriodStart()
	return du
}

// SetPeriodEnd sets the "period_end" field.
func (du *DiscountUpdate) SetPeriodEnd(t time.Time) *DiscountUpdate {
	du.mutation.SetPeriodEnd(t)
	return du
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (du *DiscountUpdate) SetNillablePeriodEnd(t *time.Time) *DiscountUpdate {
	if t != nil {
		du.SetPeriodEnd(*t)
	}
	return du
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (du *DiscountUpdate) ClearPeriodEnd() *DiscountUpdate {
	du.mutation.ClearPeriodEnd()
	return du
}

// SetMethod sets the "method" field.
func (du *DiscountUpdate) SetMethod(d discount.Method) *DiscountUpdate {
	du.mutation.SetMethod(d)
	return du
}

// SetDiscountPrice sets the "discount_price" field.
func (du *DiscountUpdate) SetDiscountPrice(i int) *DiscountUpdate {
	du.mutation.ResetDiscountPrice()
	du.mutation.SetDiscountPrice(i)
	return du
}

// AddDiscountPrice adds i to the "discount_price" field.
func (du *DiscountUpdate) AddDiscountPrice(i int) *DiscountUpdate {
	du.mutation.AddDiscountPrice(i)
	return du
}

// SetDiscountPercentage sets the "discount_percentage" field.
func (du *DiscountUpdate) SetDiscountPercentage(f float64) *DiscountUpdate {
	du.mutation.ResetDiscountPercentage()
	du.mutation.SetDiscountPercentage(f)
	return du
}

// AddDiscountPercentage adds f to the "discount_percentage" field.
func (du *DiscountUpdate) AddDiscountPercentage(f float64) *DiscountUpdate {
	du.mutation.AddDiscountPercentage(f)
	return du
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (du *DiscountUpdate) AddOrderIDs(ids ...uuid.UUID) *DiscountUpdate {
	du.mutation.AddOrderIDs(ids...)
	return du
}

// AddOrders adds the "orders" edges to the Order entity.
func (du *DiscountUpdate) AddOrders(o ...*Order) *DiscountUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return du.AddOrderIDs(ids...)
}

// Mutation returns the DiscountMutation object of the builder.
func (du *DiscountUpdate) Mutation() *DiscountMutation {
	return du.mutation
}

// ClearOrders clears all "orders" edges to the Order entity.
func (du *DiscountUpdate) ClearOrders() *DiscountUpdate {
	du.mutation.ClearOrders()
	return du
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (du *DiscountUpdate) RemoveOrderIDs(ids ...uuid.UUID) *DiscountUpdate {
	du.mutation.RemoveOrderIDs(ids...)
	return du
}

// RemoveOrders removes "orders" edges to Order entities.
func (du *DiscountUpdate) RemoveOrders(o ...*Order) *DiscountUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return du.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DiscountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiscountUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiscountUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiscountUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DiscountUpdate) check() error {
	if v, ok := du.mutation.Method(); ok {
		if err := discount.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf("ent: validator failed for field \"method\": %w", err)}
		}
	}
	return nil
}

func (du *DiscountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discount.Table,
			Columns: discount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: discount.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.PeriodStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: discount.FieldPeriodStart,
		})
	}
	if du.mutation.PeriodStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: discount.FieldPeriodStart,
		})
	}
	if value, ok := du.mutation.PeriodEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: discount.FieldPeriodEnd,
		})
	}
	if du.mutation.PeriodEndCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: discount.FieldPeriodEnd,
		})
	}
	if value, ok := du.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: discount.FieldMethod,
		})
	}
	if value, ok := du.mutation.DiscountPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: discount.FieldDiscountPrice,
		})
	}
	if value, ok := du.mutation.AddedDiscountPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: discount.FieldDiscountPrice,
		})
	}
	if value, ok := du.mutation.DiscountPercentage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: discount.FieldDiscountPercentage,
		})
	}
	if value, ok := du.mutation.AddedDiscountPercentage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: discount.FieldDiscountPercentage,
		})
	}
	if du.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discount.OrdersTable,
			Columns: discount.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !du.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discount.OrdersTable,
			Columns: discount.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discount.OrdersTable,
			Columns: discount.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DiscountUpdateOne is the builder for updating a single Discount entity.
type DiscountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscountMutation
}

// SetPeriodStart sets the "period_start" field.
func (duo *DiscountUpdateOne) SetPeriodStart(t time.Time) *DiscountUpdateOne {
	duo.mutation.SetPeriodStart(t)
	return duo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillablePeriodStart(t *time.Time) *DiscountUpdateOne {
	if t != nil {
		duo.SetPeriodStart(*t)
	}
	return duo
}

// ClearPeriodStart clears the value of the "period_start" field.
func (duo *DiscountUpdateOne) ClearPeriodStart() *DiscountUpdateOne {
	duo.mutation.ClearPeriodStart()
	return duo
}

// SetPeriodEnd sets the "period_end" field.
func (duo *DiscountUpdateOne) SetPeriodEnd(t time.Time) *DiscountUpdateOne {
	duo.mutation.SetPeriodEnd(t)
	return duo
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillablePeriodEnd(t *time.Time) *DiscountUpdateOne {
	if t != nil {
		duo.SetPeriodEnd(*t)
	}
	return duo
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (duo *DiscountUpdateOne) ClearPeriodEnd() *DiscountUpdateOne {
	duo.mutation.ClearPeriodEnd()
	return duo
}

// SetMethod sets the "method" field.
func (duo *DiscountUpdateOne) SetMethod(d discount.Method) *DiscountUpdateOne {
	duo.mutation.SetMethod(d)
	return duo
}

// SetDiscountPrice sets the "discount_price" field.
func (duo *DiscountUpdateOne) SetDiscountPrice(i int) *DiscountUpdateOne {
	duo.mutation.ResetDiscountPrice()
	duo.mutation.SetDiscountPrice(i)
	return duo
}

// AddDiscountPrice adds i to the "discount_price" field.
func (duo *DiscountUpdateOne) AddDiscountPrice(i int) *DiscountUpdateOne {
	duo.mutation.AddDiscountPrice(i)
	return duo
}

// SetDiscountPercentage sets the "discount_percentage" field.
func (duo *DiscountUpdateOne) SetDiscountPercentage(f float64) *DiscountUpdateOne {
	duo.mutation.ResetDiscountPercentage()
	duo.mutation.SetDiscountPercentage(f)
	return duo
}

// AddDiscountPercentage adds f to the "discount_percentage" field.
func (duo *DiscountUpdateOne) AddDiscountPercentage(f float64) *DiscountUpdateOne {
	duo.mutation.AddDiscountPercentage(f)
	return duo
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (duo *DiscountUpdateOne) AddOrderIDs(ids ...uuid.UUID) *DiscountUpdateOne {
	duo.mutation.AddOrderIDs(ids...)
	return duo
}

// AddOrders adds the "orders" edges to the Order entity.
func (duo *DiscountUpdateOne) AddOrders(o ...*Order) *DiscountUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return duo.AddOrderIDs(ids...)
}

// Mutation returns the DiscountMutation object of the builder.
func (duo *DiscountUpdateOne) Mutation() *DiscountMutation {
	return duo.mutation
}

// ClearOrders clears all "orders" edges to the Order entity.
func (duo *DiscountUpdateOne) ClearOrders() *DiscountUpdateOne {
	duo.mutation.ClearOrders()
	return duo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (duo *DiscountUpdateOne) RemoveOrderIDs(ids ...uuid.UUID) *DiscountUpdateOne {
	duo.mutation.RemoveOrderIDs(ids...)
	return duo
}

// RemoveOrders removes "orders" edges to Order entities.
func (duo *DiscountUpdateOne) RemoveOrders(o ...*Order) *DiscountUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return duo.RemoveOrderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DiscountUpdateOne) Select(field string, fields ...string) *DiscountUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Discount entity.
func (duo *DiscountUpdateOne) Save(ctx context.Context) (*Discount, error) {
	var (
		err  error
		node *Discount
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiscountUpdateOne) SaveX(ctx context.Context) *Discount {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DiscountUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiscountUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DiscountUpdateOne) check() error {
	if v, ok := duo.mutation.Method(); ok {
		if err := discount.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf("ent: validator failed for field \"method\": %w", err)}
		}
	}
	return nil
}

func (duo *DiscountUpdateOne) sqlSave(ctx context.Context) (_node *Discount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discount.Table,
			Columns: discount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: discount.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Discount.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discount.FieldID)
		for _, f := range fields {
			if !discount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.PeriodStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: discount.FieldPeriodStart,
		})
	}
	if duo.mutation.PeriodStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: discount.FieldPeriodStart,
		})
	}
	if value, ok := duo.mutation.PeriodEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: discount.FieldPeriodEnd,
		})
	}
	if duo.mutation.PeriodEndCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: discount.FieldPeriodEnd,
		})
	}
	if value, ok := duo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: discount.FieldMethod,
		})
	}
	if value, ok := duo.mutation.DiscountPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: discount.FieldDiscountPrice,
		})
	}
	if value, ok := duo.mutation.AddedDiscountPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: discount.FieldDiscountPrice,
		})
	}
	if value, ok := duo.mutation.DiscountPercentage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: discount.FieldDiscountPercentage,
		})
	}
	if value, ok := duo.mutation.AddedDiscountPercentage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: discount.FieldDiscountPercentage,
		})
	}
	if duo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discount.OrdersTable,
			Columns: discount.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !duo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discount.OrdersTable,
			Columns: discount.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discount.OrdersTable,
			Columns: discount.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Discount{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
