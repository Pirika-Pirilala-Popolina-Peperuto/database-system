// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/discount"
	"github.com/google/uuid"
)

// Discount is the model entity for the Discount schema.
type Discount struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PeriodStart holds the value of the "period_start" field.
	PeriodStart time.Time `json:"period_start,omitempty"`
	// PeriodEnd holds the value of the "period_end" field.
	PeriodEnd time.Time `json:"period_end,omitempty"`
	// Method holds the value of the "method" field.
	Method discount.Method `json:"method,omitempty"`
	// DiscountPrice holds the value of the "discount_price" field.
	DiscountPrice int `json:"discount_price,omitempty"`
	// DiscountPercentage holds the value of the "discount_percentage" field.
	DiscountPercentage float64 `json:"discount_percentage,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscountQuery when eager-loading is set.
	Edges DiscountEdges `json:"edges"`
}

// DiscountEdges holds the relations/edges for other nodes in the graph.
type DiscountEdges struct {
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e DiscountEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[0] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Discount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case discount.FieldDiscountPercentage:
			values[i] = new(sql.NullFloat64)
		case discount.FieldDiscountPrice:
			values[i] = new(sql.NullInt64)
		case discount.FieldMethod:
			values[i] = new(sql.NullString)
		case discount.FieldPeriodStart, discount.FieldPeriodEnd:
			values[i] = new(sql.NullTime)
		case discount.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Discount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Discount fields.
func (d *Discount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discount.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case discount.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				d.PeriodStart = value.Time
			}
		case discount.FieldPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[i])
			} else if value.Valid {
				d.PeriodEnd = value.Time
			}
		case discount.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				d.Method = discount.Method(value.String)
			}
		case discount.FieldDiscountPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_price", values[i])
			} else if value.Valid {
				d.DiscountPrice = int(value.Int64)
			}
		case discount.FieldDiscountPercentage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_percentage", values[i])
			} else if value.Valid {
				d.DiscountPercentage = value.Float64
			}
		}
	}
	return nil
}

// QueryOrders queries the "orders" edge of the Discount entity.
func (d *Discount) QueryOrders() *OrderQuery {
	return (&DiscountClient{config: d.config}).QueryOrders(d)
}

// Update returns a builder for updating this Discount.
// Note that you need to call Discount.Unwrap() before calling this method if this Discount
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Discount) Update() *DiscountUpdateOne {
	return (&DiscountClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Discount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Discount) Unwrap() *Discount {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Discount is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Discount) String() string {
	var builder strings.Builder
	builder.WriteString("Discount(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", period_start=")
	builder.WriteString(d.PeriodStart.Format(time.ANSIC))
	builder.WriteString(", period_end=")
	builder.WriteString(d.PeriodEnd.Format(time.ANSIC))
	builder.WriteString(", method=")
	builder.WriteString(fmt.Sprintf("%v", d.Method))
	builder.WriteString(", discount_price=")
	builder.WriteString(fmt.Sprintf("%v", d.DiscountPrice))
	builder.WriteString(", discount_percentage=")
	builder.WriteString(fmt.Sprintf("%v", d.DiscountPercentage))
	builder.WriteByte(')')
	return builder.String()
}

// Discounts is a parsable slice of Discount.
type Discounts []*Discount

func (d Discounts) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
