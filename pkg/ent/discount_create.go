// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/discount"
	"github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/order"
	"github.com/google/uuid"
)

// DiscountCreate is the builder for creating a Discount entity.
type DiscountCreate struct {
	config
	mutation *DiscountMutation
	hooks    []Hook
}

// SetPeriodStart sets the "period_start" field.
func (dc *DiscountCreate) SetPeriodStart(t time.Time) *DiscountCreate {
	dc.mutation.SetPeriodStart(t)
	return dc
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (dc *DiscountCreate) SetNillablePeriodStart(t *time.Time) *DiscountCreate {
	if t != nil {
		dc.SetPeriodStart(*t)
	}
	return dc
}

// SetPeriodEnd sets the "period_end" field.
func (dc *DiscountCreate) SetPeriodEnd(t time.Time) *DiscountCreate {
	dc.mutation.SetPeriodEnd(t)
	return dc
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (dc *DiscountCreate) SetNillablePeriodEnd(t *time.Time) *DiscountCreate {
	if t != nil {
		dc.SetPeriodEnd(*t)
	}
	return dc
}

// SetMethod sets the "method" field.
func (dc *DiscountCreate) SetMethod(d discount.Method) *DiscountCreate {
	dc.mutation.SetMethod(d)
	return dc
}

// SetDiscountPrice sets the "discount_price" field.
func (dc *DiscountCreate) SetDiscountPrice(i int) *DiscountCreate {
	dc.mutation.SetDiscountPrice(i)
	return dc
}

// SetDiscountPercentage sets the "discount_percentage" field.
func (dc *DiscountCreate) SetDiscountPercentage(f float64) *DiscountCreate {
	dc.mutation.SetDiscountPercentage(f)
	return dc
}

// SetID sets the "id" field.
func (dc *DiscountCreate) SetID(u uuid.UUID) *DiscountCreate {
	dc.mutation.SetID(u)
	return dc
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (dc *DiscountCreate) AddOrderIDs(ids ...uuid.UUID) *DiscountCreate {
	dc.mutation.AddOrderIDs(ids...)
	return dc
}

// AddOrders adds the "orders" edges to the Order entity.
func (dc *DiscountCreate) AddOrders(o ...*Order) *DiscountCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return dc.AddOrderIDs(ids...)
}

// Mutation returns the DiscountMutation object of the builder.
func (dc *DiscountCreate) Mutation() *DiscountMutation {
	return dc.mutation
}

// Save creates the Discount in the database.
func (dc *DiscountCreate) Save(ctx context.Context) (*Discount, error) {
	var (
		err  error
		node *Discount
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DiscountCreate) SaveX(ctx context.Context) *Discount {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DiscountCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DiscountCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DiscountCreate) check() error {
	if _, ok := dc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "method"`)}
	}
	if v, ok := dc.mutation.Method(); ok {
		if err := discount.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "method": %w`, err)}
		}
	}
	if _, ok := dc.mutation.DiscountPrice(); !ok {
		return &ValidationError{Name: "discount_price", err: errors.New(`ent: missing required field "discount_price"`)}
	}
	if _, ok := dc.mutation.DiscountPercentage(); !ok {
		return &ValidationError{Name: "discount_percentage", err: errors.New(`ent: missing required field "discount_percentage"`)}
	}
	return nil
}

func (dc *DiscountCreate) sqlSave(ctx context.Context) (*Discount, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (dc *DiscountCreate) createSpec() (*Discount, *sqlgraph.CreateSpec) {
	var (
		_node = &Discount{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: discount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: discount.FieldID,
			},
		}
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.PeriodStart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: discount.FieldPeriodStart,
		})
		_node.PeriodStart = value
	}
	if value, ok := dc.mutation.PeriodEnd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: discount.FieldPeriodEnd,
		})
		_node.PeriodEnd = value
	}
	if value, ok := dc.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: discount.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := dc.mutation.DiscountPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: discount.FieldDiscountPrice,
		})
		_node.DiscountPrice = value
	}
	if value, ok := dc.mutation.DiscountPercentage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: discount.FieldDiscountPercentage,
		})
		_node.DiscountPercentage = value
	}
	if nodes := dc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discount.OrdersTable,
			Columns: discount.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DiscountCreateBulk is the builder for creating many Discount entities in bulk.
type DiscountCreateBulk struct {
	config
	builders []*DiscountCreate
}

// Save creates the Discount entities in the database.
func (dcb *DiscountCreateBulk) Save(ctx context.Context) ([]*Discount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Discount, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiscountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DiscountCreateBulk) SaveX(ctx context.Context) []*Discount {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DiscountCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DiscountCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
