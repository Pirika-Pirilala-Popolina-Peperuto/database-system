// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent"
	discount "github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/discount"
	order "github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/order"
	uuid "github.com/google/uuid"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
)

// DiscountService implements DiscountServiceServer
type DiscountService struct {
	client *ent.Client
	UnimplementedDiscountServiceServer
}

// NewDiscountService returns a new DiscountService
func NewDiscountService(client *ent.Client) *DiscountService {
	return &DiscountService{
		client: client,
	}
}

func toProtoDiscount_Method(e discount.Method) Discount_Method {
	if v, ok := Discount_Method_value[strings.ToUpper(string(e))]; ok {
		return Discount_Method(v)
	}
	return Discount_Method(0)
}

func toEntDiscount_Method(e Discount_Method) discount.Method {
	if v, ok := Discount_Method_name[int32(e)]; ok {
		return discount.Method(strings.ToLower(v))
	}
	return ""
}

// toProtoDiscount transforms the ent type to the pb type
func toProtoDiscount(e *ent.Discount) (*Discount, error) {
	v := &Discount{}
	discountpercentage := e.DiscountPercentage
	v.DiscountPercentage = discountpercentage
	discountprice := int32(e.DiscountPrice)
	v.DiscountPrice = discountprice
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	method := toProtoDiscount_Method(e.Method)
	v.Method = method
	periodend := timestamppb.New(e.PeriodEnd)
	v.PeriodEnd = periodend
	periodstart := timestamppb.New(e.PeriodStart)
	v.PeriodStart = periodstart
	for _, edg := range e.Edges.Orders {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Orders = append(v.Orders, &Order{
			Id: id,
		})
	}
	return v, nil
}

// Create implements DiscountServiceServer.Create
func (svc *DiscountService) Create(ctx context.Context, req *CreateDiscountRequest) (*Discount, error) {
	discount := req.GetDiscount()
	m := svc.client.Discount.Create()
	discountDiscountPercentage := float64(discount.GetDiscountPercentage())
	m.SetDiscountPercentage(discountDiscountPercentage)
	discountDiscountPrice := int(discount.GetDiscountPrice())
	m.SetDiscountPrice(discountDiscountPrice)
	discountMethod := toEntDiscount_Method(discount.GetMethod())
	m.SetMethod(discountMethod)
	if discount.GetPeriodEnd() != nil {
		discountPeriodEnd := runtime.ExtractTime(discount.GetPeriodEnd())
		m.SetPeriodEnd(discountPeriodEnd)
	}
	if discount.GetPeriodStart() != nil {
		discountPeriodStart := runtime.ExtractTime(discount.GetPeriodStart())
		m.SetPeriodStart(discountPeriodStart)
	}
	for _, item := range discount.GetOrders() {
		var orders uuid.UUID
		if err := (&orders).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddOrderIDs(orders)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoDiscount(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements DiscountServiceServer.Get
func (svc *DiscountService) Get(ctx context.Context, req *GetDiscountRequest) (*Discount, error) {
	var (
		err error
		get *ent.Discount
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetDiscountRequest_VIEW_UNSPECIFIED, GetDiscountRequest_BASIC:
		get, err = svc.client.Discount.Get(ctx, id)
	case GetDiscountRequest_WITH_EDGE_IDS:
		get, err = svc.client.Discount.Query().
			Where(discount.ID(id)).
			WithOrders(func(query *ent.OrderQuery) {
				query.Select(order.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoDiscount(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements DiscountServiceServer.Update
func (svc *DiscountService) Update(ctx context.Context, req *UpdateDiscountRequest) (*Discount, error) {
	discount := req.GetDiscount()
	var discountID uuid.UUID
	if err := (&discountID).UnmarshalBinary(discount.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Discount.UpdateOneID(discountID)
	discountDiscountPercentage := float64(discount.GetDiscountPercentage())
	m.SetDiscountPercentage(discountDiscountPercentage)
	discountDiscountPrice := int(discount.GetDiscountPrice())
	m.SetDiscountPrice(discountDiscountPrice)
	discountMethod := toEntDiscount_Method(discount.GetMethod())
	m.SetMethod(discountMethod)
	if discount.GetPeriodEnd() != nil {
		discountPeriodEnd := runtime.ExtractTime(discount.GetPeriodEnd())
		m.SetPeriodEnd(discountPeriodEnd)
	}
	if discount.GetPeriodStart() != nil {
		discountPeriodStart := runtime.ExtractTime(discount.GetPeriodStart())
		m.SetPeriodStart(discountPeriodStart)
	}
	for _, item := range discount.GetOrders() {
		var orders uuid.UUID
		if err := (&orders).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddOrderIDs(orders)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoDiscount(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements DiscountServiceServer.Delete
func (svc *DiscountService) Delete(ctx context.Context, req *DeleteDiscountRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Discount.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements DiscountServiceServer.List
func (svc *DiscountService) List(ctx context.Context, req *ListDiscountRequest) (*ListDiscountResponse, error) {
	var (
		err      error
		entList  []*ent.Discount
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Discount.Query().
		Order(ent.Desc(discount.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(discount.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListDiscountRequest_VIEW_UNSPECIFIED, ListDiscountRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListDiscountRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithOrders(func(query *ent.OrderQuery) {
				query.Select(order.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		var pbList []*Discount
		for _, entEntity := range entList {
			pbEntity, err := toProtoDiscount(entEntity)
			if err != nil {
				return nil, status.Errorf(codes.Internal, "internal error: %s", err)
			}
			pbList = append(pbList, pbEntity)
		}
		return &ListDiscountResponse{
			DiscountList:  pbList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
