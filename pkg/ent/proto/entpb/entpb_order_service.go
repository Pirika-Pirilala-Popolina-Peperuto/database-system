// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent"
	discount "github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/discount"
	order "github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/order"
	product "github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/product"
	user "github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/user"
	uuid "github.com/google/uuid"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	strings "strings"
)

// OrderService implements OrderServiceServer
type OrderService struct {
	client *ent.Client
	UnimplementedOrderServiceServer
}

// NewOrderService returns a new OrderService
func NewOrderService(client *ent.Client) *OrderService {
	return &OrderService{
		client: client,
	}
}

func toProtoOrder_ProcessStatus(e order.ProcessStatus) Order_ProcessStatus {
	if v, ok := Order_ProcessStatus_value[strings.ToUpper(string(e))]; ok {
		return Order_ProcessStatus(v)
	}
	return Order_ProcessStatus(0)
}

func toEntOrder_ProcessStatus(e Order_ProcessStatus) order.ProcessStatus {
	if v, ok := Order_ProcessStatus_name[int32(e)]; ok {
		return order.ProcessStatus(strings.ToLower(v))
	}
	return ""
}

// toProtoOrder transforms the ent type to the pb type
func toProtoOrder(e *ent.Order) (*Order, error) {
	v := &Order{}
	createdat := timestamppb.New(e.CreatedAt)
	v.CreatedAt = createdat
	customerid, err := e.CustomerID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.CustomerId = customerid
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	processstatus := toProtoOrder_ProcessStatus(e.ProcessStatus)
	v.ProcessStatus = processstatus
	remark := wrapperspb.String(e.Remark)
	v.Remark = remark
	for _, edg := range e.Edges.Discounts {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Discounts = append(v.Discounts, &Discount{
			Id: id,
		})
	}
	for _, edg := range e.Edges.Products {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Products = append(v.Products, &Product{
			Id: id,
		})
	}
	if edg := e.Edges.User; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.User = &User{
			Id: id,
		}
	}
	return v, nil
}

// Create implements OrderServiceServer.Create
func (svc *OrderService) Create(ctx context.Context, req *CreateOrderRequest) (*Order, error) {
	order := req.GetOrder()
	m := svc.client.Order.Create()
	orderCreatedAt := runtime.ExtractTime(order.GetCreatedAt())
	m.SetCreatedAt(orderCreatedAt)
	var orderCustomerID uuid.UUID
	if err := (&orderCustomerID).UnmarshalBinary(order.GetCustomerId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetCustomerID(orderCustomerID)
	orderProcessStatus := toEntOrder_ProcessStatus(order.GetProcessStatus())
	m.SetProcessStatus(orderProcessStatus)
	if order.GetRemark() != nil {
		orderRemark := order.GetRemark().GetValue()
		m.SetRemark(orderRemark)
	}
	for _, item := range order.GetDiscounts() {
		var discounts uuid.UUID
		if err := (&discounts).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddDiscountIDs(discounts)
	}
	for _, item := range order.GetProducts() {
		var products uuid.UUID
		if err := (&products).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddProductIDs(products)
	}
	var orderUser uuid.UUID
	if err := (&orderUser).UnmarshalBinary(order.GetUser().GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetUserID(orderUser)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoOrder(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements OrderServiceServer.Get
func (svc *OrderService) Get(ctx context.Context, req *GetOrderRequest) (*Order, error) {
	var (
		err error
		get *ent.Order
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetOrderRequest_VIEW_UNSPECIFIED, GetOrderRequest_BASIC:
		get, err = svc.client.Order.Get(ctx, id)
	case GetOrderRequest_WITH_EDGE_IDS:
		get, err = svc.client.Order.Query().
			Where(order.ID(id)).
			WithDiscounts(func(query *ent.DiscountQuery) {
				query.Select(discount.FieldID)
			}).
			WithProducts(func(query *ent.ProductQuery) {
				query.Select(product.FieldID)
			}).
			WithUser(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoOrder(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements OrderServiceServer.Update
func (svc *OrderService) Update(ctx context.Context, req *UpdateOrderRequest) (*Order, error) {
	order := req.GetOrder()
	var orderID uuid.UUID
	if err := (&orderID).UnmarshalBinary(order.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Order.UpdateOneID(orderID)
	orderCreatedAt := runtime.ExtractTime(order.GetCreatedAt())
	m.SetCreatedAt(orderCreatedAt)
	var orderCustomerID uuid.UUID
	if err := (&orderCustomerID).UnmarshalBinary(order.GetCustomerId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetCustomerID(orderCustomerID)
	orderProcessStatus := toEntOrder_ProcessStatus(order.GetProcessStatus())
	m.SetProcessStatus(orderProcessStatus)
	if order.GetRemark() != nil {
		orderRemark := order.GetRemark().GetValue()
		m.SetRemark(orderRemark)
	}
	for _, item := range order.GetDiscounts() {
		var discounts uuid.UUID
		if err := (&discounts).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddDiscountIDs(discounts)
	}
	for _, item := range order.GetProducts() {
		var products uuid.UUID
		if err := (&products).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddProductIDs(products)
	}
	var orderUser uuid.UUID
	if err := (&orderUser).UnmarshalBinary(order.GetUser().GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetUserID(orderUser)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoOrder(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements OrderServiceServer.Delete
func (svc *OrderService) Delete(ctx context.Context, req *DeleteOrderRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Order.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements OrderServiceServer.List
func (svc *OrderService) List(ctx context.Context, req *ListOrderRequest) (*ListOrderResponse, error) {
	var (
		err      error
		entList  []*ent.Order
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Order.Query().
		Order(ent.Desc(order.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(order.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListOrderRequest_VIEW_UNSPECIFIED, ListOrderRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListOrderRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithDiscounts(func(query *ent.DiscountQuery) {
				query.Select(discount.FieldID)
			}).
			WithProducts(func(query *ent.ProductQuery) {
				query.Select(product.FieldID)
			}).
			WithUser(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		var pbList []*Order
		for _, entEntity := range entList {
			pbEntity, err := toProtoOrder(entEntity)
			if err != nil {
				return nil, status.Errorf(codes.Internal, "internal error: %s", err)
			}
			pbList = append(pbList, pbEntity)
		}
		return &ListOrderResponse{
			OrderList:     pbList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
