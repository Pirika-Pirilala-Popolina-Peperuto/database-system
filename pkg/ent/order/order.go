// Code generated by entc, DO NOT EDIT.

package order

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldProcessStatus holds the string denoting the process_status field in the database.
	FieldProcessStatus = "process_status"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgeDiscounts holds the string denoting the discounts edge name in mutations.
	EdgeDiscounts = "discounts"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "orders"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "customer_id"
	// ProductsTable is the table that holds the products relation/edge. The primary key declared below.
	ProductsTable = "order_products"
	// ProductsInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductsInverseTable = "products"
	// DiscountsTable is the table that holds the discounts relation/edge. The primary key declared below.
	DiscountsTable = "order_discounts"
	// DiscountsInverseTable is the table name for the Discount entity.
	// It exists in this package in order to avoid circular dependency with the "discount" package.
	DiscountsInverseTable = "discounts"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldCustomerID,
	FieldCreatedAt,
	FieldProcessStatus,
	FieldRemark,
}

var (
	// ProductsPrimaryKey and ProductsColumn2 are the table columns denoting the
	// primary key for the products relation (M2M).
	ProductsPrimaryKey = []string{"order_id", "product_id"}
	// DiscountsPrimaryKey and DiscountsColumn2 are the table columns denoting the
	// primary key for the discounts relation (M2M).
	DiscountsPrimaryKey = []string{"order_id", "discount_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// ProcessStatus defines the type for the "process_status" enum field.
type ProcessStatus string

// ProcessStatus values.
const (
	ProcessStatusUNPAID     ProcessStatus = "UNPAID"
	ProcessStatusPROCESSING ProcessStatus = "PROCESSING"
	ProcessStatusCOMPLETE   ProcessStatus = "COMPLETE"
)

func (ps ProcessStatus) String() string {
	return string(ps)
}

// ProcessStatusValidator is a validator for the "process_status" field enum values. It is called by the builders before save.
func ProcessStatusValidator(ps ProcessStatus) error {
	switch ps {
	case ProcessStatusUNPAID, ProcessStatusPROCESSING, ProcessStatusCOMPLETE:
		return nil
	default:
		return fmt.Errorf("order: invalid enum value for process_status field: %q", ps)
	}
}
