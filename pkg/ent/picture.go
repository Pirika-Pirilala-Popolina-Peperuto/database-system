// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/picture"
	"github.com/Pirika-Pirilala-Popolina-Peperuto/database-system/pkg/ent/product"
	"github.com/google/uuid"
)

// Picture is the model entity for the Picture schema.
type Picture struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PictureURL holds the value of the "picture_url" field.
	PictureURL string `json:"picture_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PictureQuery when eager-loading is set.
	Edges           PictureEdges `json:"edges"`
	product_picture *uuid.UUID
}

// PictureEdges holds the relations/edges for other nodes in the graph.
type PictureEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PictureEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Picture) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case picture.FieldPictureURL:
			values[i] = new(sql.NullString)
		case picture.FieldID:
			values[i] = new(uuid.UUID)
		case picture.ForeignKeys[0]: // product_picture
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Picture", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Picture fields.
func (pi *Picture) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case picture.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pi.ID = *value
			}
		case picture.FieldPictureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture_url", values[i])
			} else if value.Valid {
				pi.PictureURL = value.String
			}
		case picture.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field product_picture", values[i])
			} else if value.Valid {
				pi.product_picture = new(uuid.UUID)
				*pi.product_picture = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryProduct queries the "product" edge of the Picture entity.
func (pi *Picture) QueryProduct() *ProductQuery {
	return (&PictureClient{config: pi.config}).QueryProduct(pi)
}

// Update returns a builder for updating this Picture.
// Note that you need to call Picture.Unwrap() before calling this method if this Picture
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *Picture) Update() *PictureUpdateOne {
	return (&PictureClient{config: pi.config}).UpdateOne(pi)
}

// Unwrap unwraps the Picture entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *Picture) Unwrap() *Picture {
	tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: Picture is not a transactional entity")
	}
	pi.config.driver = tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *Picture) String() string {
	var builder strings.Builder
	builder.WriteString("Picture(")
	builder.WriteString(fmt.Sprintf("id=%v", pi.ID))
	builder.WriteString(", picture_url=")
	builder.WriteString(pi.PictureURL)
	builder.WriteByte(')')
	return builder.String()
}

// Pictures is a parsable slice of Picture.
type Pictures []*Picture

func (pi Pictures) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
